+package sandbox
+alias stdout org.eolang.io.stdout
+alias sprintf org.eolang.txt.sprintf

# Description:
# In this example, "inheriting" base by derived1 and derived2 and overriding n
# should result in non terminating mutual recursion, because derived1.n will
# call base.m, which will again call derived1.n (the same is true for derived2)
#
# Desired output:
# The analyzer should output that:
# - derived1.n is mutually recursive with base.m, when self is an instance
#   of derived1
# - derived1.n is mutually recursive with base.m, when self is an instance
#   of derived2
# - derived2.n is mutually recursive with base.m, when self is an instance
#   of derived2
# - derived2.n is mutually recursive with base.m, when self is an instance
#   of derived1
# - base.m is mutually recursive with derived1.n, when self is an instance of
#   derived1
# - base.m is mutually recursive with derived1.n, when self is an instance of
#   derived2
# - base.m is mutually recursive with derived2.n, when self is an instance of
#   derived1
# - base.m is mutually recursive with derived2.n, when self is an instance of
#   derived2

[] > base
  memory > x
  [self v] > n
    seq > @
      stdout
        sprintf "Calling base.n with v = %d\n" v
      x.write v
  [self v] > m
    seq > @
      stdout
        sprintf "Calling base.m with v = %d\n" v
      self.n self v

[] > derived
  base > @
  [self v] > n
    seq > @
      stdout (sprintf "Calling derived.n with v = %d\n" v)
      self.m self v

[args...] > app
  base > b
  derived > d
  seq > @
    b.n b 10
    stdout
      sprintf
        "base:\n\tx after n = %d\n"
        b.x
    b.m b 12
    stdout
      sprintf
        "\tx after m = %d\n"
        b.x
    d.n d 5
    stdout
      sprintf
        "\nderived:\n\tx after n = %d\n"
        d.x
